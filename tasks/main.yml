#####################################################################################
# Global
#####################################################################################

- name: Gathering facts if it was not done before
  setup:
  when: ansible_facts['os_family'] is not defined

#####################################################################################
# Enable access between containers (optional)
#####################################################################################

- name: 'Allow full access from containers'
  ansible.builtin.iptables:
    chain: INPUT
    in_interface: 'br-+'
    jump: ACCEPT
    comment: 'Allow containers access'
  become: true
  when: docker_intra_access | default (false)
  register: iptables_br

- name: 'Allow full access from containers on docker0'
  ansible.builtin.iptables:
    chain: INPUT
    in_interface: 'docker0'
    jump: ACCEPT
    comment: 'Allow containers access on docker0'
  become: true
  when: docker_intra_access | default (false)
  register: iptables_br2

- name: Save iptables
  shell: |
    iptables-save | grep -v 'TEMP ' | grep -v 'LIBVIRT_' \
    | grep -v -i 'docker' | grep -v 'A FORWARD ' \
    | grep -v 'ufw-' >/etc/iptables/rules.v4
  become: true
  check_mode: no
  when:
    - iptables_br.changed or iptables_br2.changed
    - docker_intra_access | default (false)

#####################################################################################
# Uninstall docker.io package
#####################################################################################

- name: Uninstall docker.io package
  apt:
    pkg:
      - docker.io
    state: absent
  become: true

#####################################################################################
# Install prerequisites
#####################################################################################

- name: Install packages to allow apt to use a repository over HTTPS
  apt:
    name: 
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
  become: true

- name: Add Dockers official GPG key to /usr/share/keyrings
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
    keyring: /usr/share/keyrings/docker-archive-keyring.gpg
  become: true

- name: Set up the Docker repository
  copy:
    content: |
      deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    dest: /etc/apt/sources.list.d/docker.list
  become: true

- name: Update the apt package index
  apt:
    update_cache: yes
  become: true
  changed_when: false

#####################################################################################
# Install docker-ce
#####################################################################################

- name: Install latest docker-ce packages
  apt:
    pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: latest
  become: true

- name: Ensure Docker service is enabled and started
  systemd:
    name: docker
    enabled: yes
    state: started
  become: true

- name: Verify Docker installation
  command: docker --version
  register: docker_version
  changed_when: false

- debug:
    msg: "Docker version installed: {{ docker_version.stdout }}"

#####################################################################################
# Install docker-compose
#####################################################################################

- name: Download Docker Compose binary
  get_url:
    url: https://github.com/docker/compose/releases/download/v2.29.7/docker-compose-linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: '0755'
  become: true

- name: Verify Docker Compose binary installation
  command: docker-compose --version
  register: compose_version_check
  ignore_errors: yes
  changed_when: false

- debug:
    msg: "Docker-compose version installed: {{ compose_version_check.stdout }}"

#####################################################################################
# Update python libraries
#####################################################################################

# - name: Install build dependencies
#   apt:
#     name:
#       - build-essential
#       - libssl-dev
#       - libffi-dev
#       - python3-dev
#     state: present
#   become: true

# - name: Upgrade pip, setuptools, wheel
#   pip:
#     name:
#       - pip
#       - setuptools
#       - wheel
#     state: latest
#     extra_args: --ignore-installed
#   environment:
#     PIP_USER: "no"
#   become: true

# - name: Upgrade PyYAML
#   pip:
#     name: PyYAML
#     state: latest
#     extra_args: "--no-binary :all:"
#   environment:
#     PIP_USER: "no"
#   become: true

- name: Install Docker python libs
  pip:
    name:
      - "docker"
    extra_args: "--break-system-packages"
  environment:
    PIP_USER: "no"
  become: true

# - name: Log into private docker registries
#   docker_login:
#     registry: "{{ item.host }}"
#     username: "{{ item.login }}"
#     password: "{{ item.password }}"
#   become: true
#   loop: "{{ docker_registry | default([]) }}"
#   when:
#     - item.password is defined
#     - item.password != ""

#####################################################################################
# Add cronjob to prune images every Saturday
#####################################################################################

- name: Add cronjob to prune images every Saturday
  ansible.builtin.cron:
    name: docker_image_prune
    weekday: "6"
    minute: "05"
    hour: "05"
    user: root
    job: "docker image prune -f && docker builder prune -f && docker system prune -f && docker container prune -f"
    cron_file: docker_image_prune
  become: true
